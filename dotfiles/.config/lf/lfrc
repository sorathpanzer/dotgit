# Basic Settings

set preview true
set previewer preview
set icons true
set ignorecase true
set shellopts '-eu'
set sortby ext
set info time
set cleaner preview-image
set shell zsh
set shellopts '-euy'
set ifs "\n"
set incsearch
set filesep "\n"  # default already
set scrolloff 11
set period 1
set findlen 2
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml:lost+found"

# Custom Functions

cmd bulkrename ${{
    old=$(mktemp)
    new=$(mktemp)
    [ -n $fs ] && fs=$(ls)
    printf "$fs\n" > $old
    printf "$fs\n" > $new
    $EDITOR $new
    [ $(cat $new | wc -l) -ne $(cat $old | wc -l) ] && exit
    paste $old $new | while read names; do
        src=$(printf $names | cut -f1)
        dst=$(printf $names | cut -f2)
        [ $src = $dst ] && continue
        [ -e $dst ] && continue
        mv $src $dst
    done
    rm $old $new
    lf -remote "send $id unselect"
}}

cmd open ${{
    case $(file --mime-type "$f" -bL) in
        text/*|application/json) $EDITOR "$f";;
        *)
        xdg-open "$f" & #> /dev/null 2> /dev/null &
    esac
}}

cmd mkdir ${{
  clear
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  clear
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd chmod ${{
  for file in "$fx"
  do
    chmod +x $file
    lf -remote "send $id reload"
  done
}}

cmd setwallpaper %feh --bg-fill "$f"

cmd mtsda ${{
  clear
  udisksctl unlock -b /dev/sda1
  udisksctl mount -b /dev/dm-3
  lf -remote "send $id cd /media/Vault"
}}

cmd usb ${{
  clear
  udisksctl mount -b /dev/sdb
  lf -remote "send $id cd /media/sdb"
}}

cmd rpac ${{
    cd /var/cache/pacman/pkg
    sudo pacman -U $(ls -p | grep -v / | fzf)
}}

cmd encrypt ${{
    tar czf data.tar.gz "$f"
}}

# dynamically set number of columns
cmd autoratios &{{
                    w=$(tput cols)
                    if [ $w -le 60 ]; then
                        lf -remote "send $id set nopreview"
                        lf -remote "send $id set ratios 1"
                    elif [ $w -le 130 ]; then
                        lf -remote "send $id set ratios 1:1"
                        lf -remote "send $id set preview"
                    else
                        lf -remote "send $id set ratios 1:1"
                        lf -remote "send $id set preview"
                    fi
                    lf -remote "send reload"
                }}
autoratios # auto-run at start

# Better Archive
cmd compress ${{
    clear
    set -f
    printf "Archive Name: "
    read name
    mkdir $name
    cp -r $fx $name
    tar -czvf "$name.tar.gz" $name
    rm -r $name
}}

cmd extract ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf "$f";;
      *.tar.zst) tar -I zstd -xvf "$f" ;;
      *.tar.gz|*.tgz) tar -xzvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *.tar.xz|*.txz) tar -xvf "$f" ;;
      *.xz) xz --decompress "$f" ;;
      *.rar) unrar x $f ;;
      *.7z) 7z x $f ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd size ${{
  du -h "$f"
  read exit
}}

cmd burniso ${{
  clear
  sudo dd if="$f" of=/dev/sdb
}}

# Trash cli bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Move to where?"
	dest="$(find -L . $HOME -maxdepth 4 -type d | fzf | sed 's|~|$HOME|' )" &&
	if [ -n "$dest" ]; then
		for x in $fx; do
			eval mv -iv \"$x\" \"$dest\"
		done &&
		notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
	fi
}}

cmd clear_trash ${{
    echo "y" | trash-empty
    paplay /usr/share/sounds/freedesktop/stereo/trash-empty.oga
}}

cmd restore_trash ${{
  trash-restore
}}

cmd viewtrash ${{
  clear
  du -sh ~/.local/share/Trash/files; echo "$(ls ~/.local/share/Trash/files | wc -l)       files"
  ls -Slh ~/.local/share/Trash/files
  printf "\n          Hit enter to exit!"
  read exit
}}

cmd mvtofold ${{
    clear
    set -f
    printf "Directory Name: "
    read newd
    mkdir $newd
    mv $fx $newd
}}

cmd yank-path ${{
    if [ -n "$fs" ]; then echo "$fs"; else echo "$f" | tr -d '\n'; fi |
      xclip -i -selection clipboard
}}

cmd yank-basename ${{
    if [ -n "$fs" ]; then
      echo "$fs" | xargs -r -d '\n' basename -a --
    else
      basename -- "$f" | tr -d '\n'
    fi | xclip -i -selection clipboard
}}

cmd stow ${{
    clear
    cd ~/.config/dotgit
    stow -nvt ~ dotfiles
    printf "Link all files to the Stow [y/n]: "
    read ans
    if [ $ans = "y" ]; then
      stow -vt ~ dotfiles
      echo "OK!"
      read exit
    else
      echo " "
      cd -
     fi
}}

cmd stowfile ${{
    clear
    if [ ! -L "$f" ]; then
        backit=$(dirname "$f")
        #link=$(dirname "$f" | sd "/home/sorath" "")
        link=$(dirname "$f" | sed 's/\/home\/sorath//')
        file=$(basename "$f")
        mv "$f" ~/.config/dotgit/dotfiles/$link
        cd ~/.config/dotgit
        stow -nvt ~ dotfiles
        printf "Link all files to the Stow [y/n]: "
        read ans
            if [ $ans = "y" ]; then
                stow -vt ~ dotfiles
                echo "OK!"
                read exit
            else
                mv ~/.config/dotgit/dotfiles/$link/$file $backit
                echo " "
                cd -
            fi
    else
         echo "The file is a symlink... Press 'Enter' to exit!!"
         read exit
    fi
}}

cmd cutvideo ${{
    echo "Start position:"
    read start
    echo "End position:"
    read end
    echo "Rename to:"
    read name
    ffmpeg -i "$f" -ss $start -to $end -c copy $name.mp4
}}

cmd logat ${{
  printf '%s\n' "$PWD" > "$HOME/.config/lf/lf.d"
  lf -remote "send $id quit"
}}

cmd gf ${{
        nvim "$(find -L . $HOME -maxdepth 4 -type f | fzf --height 100% --preview 'pv {}')"
}}

cmd gd ${{
        lf -remote "send $id cd '$(find -L $HOME /media/Vault/Imagens/x -maxdepth 4 -type d | fzf)'"
}}

# Share files up to 256 Mib
cmd share ${{
	curl -F"file=@$fx" https://0x0.st | xclip -sel c -r
  xclip -o
  read exit
}}

cmd format ${{
    sudo mkfs.vfat -F32 /dev/sdb1
}}

cmd gif ${{
    clear
    echo "Set the scale for the gif!"
    read sc
    ffmpeg -i $fx -vf "scale=iw/$sc:ih/$sc" -pix_fmt yuv420p $(echo "$f" | cut -f1 -d ".").gif
}}

cmd vrotate ${{
    clear
    mv $fx $(echo "$f" | cut -f1 -d ".")-OLD.$(echo "$f" | cut -f2 -d ".")
    ffmpeg -i $(echo "$f" | cut -f1 -d ".")-OLD.$(echo "$f" | cut -f2 -d ".") -c copy -metadata:s:v:0 rotate=0 $(echo "$f" | cut -f1 -d ".").$(echo "$f" | cut -f2 -d ".")
}}

cmd vcut ${{
    clear
    echo "Set the start point!"
    read start
    echo "Set the end point!"
    read end

    if [ "$start" -eq "" ]; then
        start=00:00:00
    fi

    if [ "$end" = "" ]; then
        ffmpeg -ss $start -i raw.webm -c copy $(echo "$f" | cut -f1 -d ".")-cut.$(echo "$f" | cut -f2 -d ".")
    else
        ffmpeg -ss $start -i raw.webm -to $end -c copy $(echo "$f" | cut -f1 -d ".")-cut.$(echo "$f" | cut -f2 -d ".")
    fi
}}

# Bindings
# Remove some defaults
map m
map o
map n
map "'"
map '"'
map d
map c
map e
map f
map u

map ffg gif
map ffr vrotate
map ffc vcut
map i rpac
map <lt><lt> gd
map <lt>z gf
map usb usb
map ub unbash
map fu format

# Archive Mappings
map - extract
map + compress

# Trash Mappings
map dd trash
map dc clear_trash
map dr restore_trash
map dv viewtrash

# Awesome Search
map S stow
map X stowfile
# Basic Functions
map . set hidden!
map x cut
map y copy
map Yf yank-basename
map Yp yank-path
map <enter> open
map cf mkfile
map cd mkdir
map * chmod
map bg setwallpaper
map br bulkrename
map r rename
map H top
map L bottom
map R reload
map C clear
map <esc> unselect
map bi burniso
map mf mvtofold
map mt moveto
map msd mtsda
cmd q quit
map w logat
map <c-space> :glob-select *
map <c-u> :glob-unselect *
map <c-s> push :glob-select<space>*.
map cv cutvideo
map sh share
map sv size

# Movement
map gV cd /media/Vault
map gM cd /media
map gh cd ~/
map gv cd ~/VÃ­deos
map gm cd ~/MÃºsica
map gi cd ~/Imagens
map gw cd ~/Documentos/wiki
map gd cd ~/Documentos
map gt cd ~/TransferÃªncias
map gs cd ~/.config/dotgit
map g.c cd ~/.config
map g.l cd ~/.local
map g/ cd /
map Âº mark-load
map a mark-save
