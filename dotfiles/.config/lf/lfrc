# Basic Settings

set preview true
set previewer ~/.config/lf/preview
set hidden true
set color256 true
set drawbox true
set icons true
set ignorecase true
set shellopts '-eu'
set sortby ext

# Custom Functions

cmd bulkrename ${{
    old=$(mktemp)
    new=$(mktemp)
    [ -n $fs ] && fs=$(ls)
    printf "$fs\n" > $old
    printf "$fs\n" > $new
    $EDITOR $new
    [ $(cat $new | wc -l) -ne $(cat $old | wc -l) ] && exit
    paste $old $new | while read names; do
        src=$(printf $names | cut -f1)
        dst=$(printf $names | cut -f2)
        [ $src = $dst ] && continue
        [ -e $dst ] && continue
        mv $src $dst
    done
    rm $old $new
    lf -remote "send $id unselect"
}}

cmd open ${{
    case $(file --mime-type "$f" -bL) in
        text/*|application/json) $EDITOR "$f";;
        video/*|image/*/application/pdf) xdg-open "$f" & disown;;
        *) xdg-open "$f" & disown;;
    esac
}}

cmd mkdir ${{
  clear
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  clear
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd chmod ${{
  for file in "$fx"
  do
    chmod +x $file
  done
}}

cmd sudomkfile ${{
  clear
  printf "File Name: "
  read ans
  sudo $EDITOR $ans
}}

cmd setwallpaper %cp "$f" ~/.config/wall.png && nitrogen --set-scaled "$f"

cmd mtsda ${{
  clear
  sudo udisksctl unlock -b /dev/sda1
  sudo udisksctl mount -b /dev/dm-1
}}

# dynamically set number of columns
cmd autoratios &{{
                    w=$(tput cols)
                    if [ $w -le 60 ]; then
                        lf -remote "send $id set nopreview"
                        lf -remote "send $id set ratios 1"
                    elif [ $w -le 130 ]; then
                        lf -remote "send $id set ratios 1:2"
                        lf -remote "send $id set preview"
                    else
                        lf -remote "send $id set ratios 1:5:6"
                        lf -remote "send $id set preview"
                    fi
                    lf -remote "send reload"
                }}
autoratios # auto-run at start

# Archive bindings
cmd extract ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) $s tar xjvf "$f";;
      *.tar.zst) tar -I zstd -xvf "$f" ;;
      *.tar.gz|*.tgz) tar -xzvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *.tar.xz|*.txz) tar -xvf "$f" ;;
      *.rar) unrar x $f ;;
      *.7z) 7z x $f ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd compress %tar -I zstd -cvf "$f.tar.zst" "$f"

cmd burniso ${{
  clear
  sudo dd if="$f" of=/dev/sdb
}}

# Trash cli bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd clear_trash %trash-empty

cmd restore_trash ${{
  trash-restore
}}

cmd viewtrash ${{
  clear
  du -sh ~/.local/share/Trash/files; echo "$(ls ~/.local/share/Trash/files | wc -l)       files"
  ls -Slh ~/.local/share/Trash/files
  printf "\n          Hit enter to exit!"
  read exit
}}

cmd cptofold ${{
    clear
    set -f
    printf "Directory Name: "
    read newd
    mkdir $newd
    cp $fx $newd
}}

cmd mvtofold ${{
    clear
    set -f
    printf "Directory Name: "
    read newd
    mkdir $newd
    mv $fx $newd
}}

cmd yank-path ${{
    if [ -n "$fs" ]; then echo "$fs"; else echo "$f" | tr -d '\n'; fi |
      xclip -i -selection clipboard
}}

cmd yank-basename ${{
    if [ -n "$fs" ]; then
      echo "$fs" | xargs -r -d '\n' basename -a --
    else
      basename -- "$f" | tr -d '\n'
    fi | xclip -i -selection clipboard
}}

cmd stow ${{
    clear
    cd ~/.config/dotgit
    stow -nvt ~ dotfiles
    printf "Link all files to the Stow [y/n]: "
    read ans
    if [[ $ans == "y" ]]; then
      stow -vt ~ dotfiles
      echo "OK!"
      read exit
    else
      echo " "
      cd -
     fi
}}

cmd size ${{
  du -h "$f"
  read exit
}}

cmd vview ${{
  mpv *
}}

cmd logout ${{
  printf '%s\n' "$PWD" > "$HOME/.config/lf/lf.d"
  pkill lf
}}

cmd fadd ${{
  fasd -A $f
}}

cmd fasv ${{
    xdg-open "$(fasd -fl $1)"
}}

cmd fasd %lf -remote "send $id cd '$(fasd -dl $1)'"

# Bindings
# Remove some defaults
map m
map o
map n
map "'"
map '"'
map d
map c
map e
map f

map a fadd
map t push :fasd<space>
map e push :fasv<space>

# Archive Mappings
map - extract
map + compress

# Trash Mappings
map dd trash
map dc clear_trash
map dr restore_trash
map dv viewtrash
map ds size

# Awesome Search
map S stow

# Basic Functions
map . set hidden!
map x cut
map y copy
map Yf yank-basename
map Yp yank-path
map <enter> open
map mf mkfile
map mr sudomkfile
map md mkdir
map X chmod
map bg setwallpaper
map br bulkrename
map r rename
map H top
map L bottom
map R reload
map C clear
map <esc> unselect
map bi burniso
map ctf cptofold
map mtf mvtofold
map msd mtsda
map V vview
map A fadd
map Q logout
cmd q quit

# Movement
map gm cd /media/Vault
map gh cd ~/
map gv cd ~/Vídeos
map gi cd ~/Imagens
map gw cd ~/Imagens/Wallpapers
map gd cd ~/Documentos
map gt cd ~/Transferências
map gs cd ~/.config/dotgit
map gc cd ~/.config
